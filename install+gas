#!/bin/bash

echo "=== HEMI Miner Installer ==="

# Параметры
MINER_DIR="$HOME/heminetwork_v1.0.0_linux_amd64"
CONFIG_FILE="$MINER_DIR/config.sh"

# Проверка прав root
if [ "$EUID" -ne 0 ]; then
    echo "Ошибка: Скрипт должен быть запущен с правами root (используйте sudo)."
    exit 1
fi

# Список необходимых пакетов
PACKAGES="jq curl screen wget unzip nano"

# Проверка и установка пакетов
echo "Проверка необходимых пакетов..."
for pkg in $PACKAGES; do
    if dpkg -l | grep -q " $pkg "; then
        echo "$pkg уже установлен."
    else
        echo "$pkg не найден, устанавливаем..."
        sudo apt update
        sudo apt install -y "$pkg"
        if [ $? -ne 0 ]; then
            echo "Ошибка: Не удалось установить $pkg."
            exit 1
        fi
    fi
done

# Проверка установки майнера
if [ -d "$MINER_DIR" ]; then
    echo "Майнер уже установлен, пропускаем установку."
else
    echo "Майнер не найден, начинаем установку..."
    sudo apt update && sudo apt upgrade -y
    wget https://github.com/hemilabs/heminetwork/releases/download/v1.0.0/heminetwork_v1.0.0_linux_amd64.tar.gz
    if [ $? -ne 0 ]; then
        echo "Ошибка: Не удалось скачать файл."
        exit 1
    fi
    tar -xvzf heminetwork_v1.0.0_linux_amd64.tar.gz
    if [ $? -ne 0 ]; then
        echo "Ошибка: Не удалось разархивировать файл."
        exit 1
    fi
    cd "$MINER_DIR" || {
        echo "Ошибка: Не удалось перейти в директорию $MINER_DIR."
        exit 1
    }
fi

# --- Функция очистки при прерывании ---
cleanup() {
    echo "Прерывание скрипта..."
    if pgrep -f "popmd" > /dev/null; then
        echo "Останавливаем майнер..."
        pkill -f "popmd"
    fi
    echo "Выход..."
    exit 0
}

# Устанавливаем обработчик прерывания (Ctrl+C)
trap cleanup INT

# --- Настройка конфига при первом запуске ---
if [ ! -f "$CONFIG_FILE" ]; then
    echo ""
    echo "===== Настройка майнера ====="
    read -p "Введите ваш приватный ключ BTC: " btc_key
    read -p "Введите POPM_STATIC_FEE (например 4): " static_fee
    if ! [[ "$static_fee" =~ ^[0-9]+$ ]]; then
        echo "Ошибка: POPM_STATIC_FEE должен быть числом!"
        exit 1
    fi
    cat > "$CONFIG_FILE" <<EOF
#!/bin/bash
export POPM_BTC_PRIVKEY=${btc_key}
export POPM_STATIC_FEE=${static_fee}
export POPM_BFG_URL=wss://pop.hemi.network/v1/ws/public
export POPM_BTC_CHAIN_NAME=mainnet
EOF
    chmod +x "$CONFIG_FILE"
    echo "✅ Конфиг создан!"
    echo "---------------------------"
    cat "$CONFIG_FILE"
    echo "---------------------------"
else
    echo "Конфиг уже существует, загружаем параметры..."
    source "$CONFIG_FILE"
fi

# --- Основной цикл мониторинга и запуска майнера ---
cd "$MINER_DIR" || exit 1

echo "Запускаем мониторинг газа и управление майнером..."
while true; do
    gas_price=$(curl -s https://mempool.space/api/v1/fees/recommended | jq -r .fastestFee 2>/dev/null)
    if [ -z "$gas_price" ] || ! [[ "$gas_price" =~ ^[0-9]+$ ]]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Ошибка: Не удалось получить данные о газе. Повтор через 30 секунд..."
        sleep 30
        continue
    fi
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Газ: $gas_price sat/vB (Порог: $POPM_STATIC_FEE sat/vB)"

    if [ "$gas_price" -le "$POPM_STATIC_FEE" ]; then
        if ! pgrep -f "popmd" > /dev/null; then
            echo "Газ в пределах нормы ($gas_price <= $POPM_STATIC_FEE), запускаем майнер в основном окне..."
            source "$CONFIG_FILE" && ./popmd
            echo "Майнер завершил работу или был остановлен. Возвращаемся к мониторингу..."
        else
            echo "Майнер уже работает (PID: $(pgrep -f "popmd" | head -n 1)), ждем его завершения или остановки..."
            # Ждем, пока майнер завершится
            while pgrep -f "popmd" > /dev/null; do
                sleep 10
                gas_price=$(curl -s https://mempool.space/api/v1/fees/recommended | jq -r .fastestFee 2>/dev/null)
                if [ "$gas_price" -gt "$POPM_STATIC_FEE" ]; then
                    echo "Газ превысил порог ($gas_price > $POPM_STATIC_FEE), останавливаем майнер..."
                    pkill -f "popmd"
                    break
                fi
            done
            echo "Майнер остановлен или завершился, продолжаем мониторинг..."
        fi
    else
        if pgrep -f "popmd" > /dev/null; then
            echo "Газ превышает порог ($gas_price > $POPM_STATIC_FEE), останавливаем майнер..."
            pkill -f "popmd"
            echo "Майнер остановлен"
        else
            echo "Газ слишком высокий ($gas_price > $POPM_STATIC_FEE), ждем снижения..."
        fi
    fi
    sleep 30
done
