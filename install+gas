#!/bin/bash

echo "=== HEMI Miner Installer ==="

# Параметры
MINER_DIR="$HOME/heminetwork_v1.0.0_linux_amd64"
CONFIG_FILE="$MINER_DIR/config.sh"
MONITOR_PID=""

# Проверка прав root
if [ "$EUID" -ne 0 ]; then
    echo "Ошибка: Скрипт должен быть запущен с правами root (используйте sudo)."
    exit 1
fi

# Список необходимых пакетов
PACKAGES="jq curl screen wget unzip nano"

# Проверка и установка пакетов
echo "Проверка необходимых пакетов..."
for pkg in $PACKAGES; do
    if dpkg -l | grep -q " $pkg "; then
        echo "$pkg уже установлен."
    else
        echo "$pkg не найден, устанавливаем..."
        sudo apt update
        sudo apt install -y "$pkg"
        if [ $? -ne 0 ]; then
            echo "Ошибка: Не удалось установить $pkg."
            exit 1
        fi
    fi
done

# Проверка установки майнера
if [ -d "$MINER_DIR" ]; then
    echo "Майнер уже установлен, пропускаем установку."
else
    echo "Майнер не найден, начинаем установку..."
    sudo apt update && sudo apt upgrade -y
    wget https://github.com/hemilabs/heminetwork/releases/download/v1.0.0/heminetwork_v1.0.0_linux_amd64.tar.gz
    if [ $? -ne 0 ]; then
        echo "Ошибка: Не удалось скачать файл."
        exit 1
    fi
    tar -xvzf heminetwork_v1.0.0_linux_amd64.tar.gz
    if [ $? -ne 0 ]; then
        echo "Ошибка: Не удалось разархивировать файл."
        exit 1
    fi
    cd "$MINER_DIR" || {
        echo "Ошибка: Не удалось перейти в директорию $MINER_DIR."
        exit 1
    }
fi

# --- Настройка конфига ---
if [ ! -f "$CONFIG_FILE" ]; then
    echo ""
    echo "===== Настройка майнера ====="
    read -p "Введите ваш приватный ключ BTC: " btc_key
    read -p "Введите POPM_STATIC_FEE (например 4): " static_fee
    if ! [[ "$static_fee" =~ ^[0-9]+$ ]]; then
        echo "Ошибка: POPM_STATIC_FEE должен быть числом!"
        exit 1
    fi
    cat > "$CONFIG_FILE" <<EOF
#!/bin/bash
export POPM_BTC_PRIVKEY=${btc_key}
export POPM_STATIC_FEE=${static_fee}
export POPM_BFG_URL=wss://pop.hemi.network/v1/ws/public
export POPM_BTC_CHAIN_NAME=mainnet
EOF
    chmod +x "$CONFIG_FILE"
    echo ""
    echo "✅ Конфиг успешно создан!"
    echo "---------------------------"
    cat "$CONFIG_FILE"
    echo "---------------------------"
else
    echo "Конфиг уже существует, загружаем параметры..."
    source "$CONFIG_FILE"
fi

# --- Функция мониторинга газа ---
monitor_gas() {
    while true; do
        gas_price=$(curl -s https://mempool.space/api/v1/fees/recommended | jq -r .fastestFee 2>/dev/null)
        if [ -z "$gas_price" ] || ! [[ "$gas_price" =~ ^[0-9]+$ ]]; then
            echo "Ошибка: Не удалось получить данные о газе. Повтор через 30 секунд..." >> gas_monitor.log
            sleep 30
            continue
        fi
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Газ: $gas_price sat/vB (Порог: $POPM_STATIC_FEE sat/vB)" >> gas_monitor.log
        
        if [ "$gas_price" -le "$POPM_STATIC_FEE" ]; then
            if ! pgrep -f "popmd" > /dev/null; then
                echo "Газ в пределах нормы ($gas_price <= $POPM_STATIC_FEE), запускаем майнер..." >> gas_monitor.log
                # Майнер будет запущен в основном окне, поэтому здесь ничего не делаем
            fi
        else
            if pgrep -f "popmd" > /dev/null; then
                echo "Газ превышает порог ($gas_price > $POPM_STATIC_FEE), останавливаем майнер..." >> gas_monitor.log
                pkill -f "popmd"
                echo "Майнер остановлен" >> gas_monitor.log
            fi
        fi
        sleep 30
    done
}

# --- Меню выбора ---
cd "$MINER_DIR" || exit 1

while true; do
    echo ""
    echo "===== Меню управления майнером ====="
    echo "1) Запустить майнер (логи в основном окне) и мониторинг газа (в screen)"
    echo "2) Редактировать конфиг (nano)"
    echo "3) Выход"
    read -p "Выберите действие: " choice
    case $choice in
        1)
            # Проверяем, запущен ли уже мониторинг
            if screen -list | grep -q "gas_monitor"; then
                echo "Мониторинг газа уже запущен в screen (gas_monitor)."
            else
                echo "Запускаем мониторинг газа в screen (gas_monitor)..."
                screen -dmS gas_monitor bash -c "cd $MINER_DIR && $0 monitor_gas"
                sleep 2
                if screen -list | grep -q "gas_monitor"; then
                    echo "Мониторинг газа запущен. Логи мониторинга в $MINER_DIR/gas_monitor.log"
                    echo "Для просмотра: screen -r gas_monitor"
                else
                    echo "Ошибка: Не удалось запустить мониторинг газа!"
                    continue
                fi
            fi

            # Проверяем текущий газ перед запуском майнера
            gas_price=$(curl -s https://mempool.space/api/v1/fees/recommended | jq -r .fastestFee 2>/dev/null)
            if [ -z "$gas_price" ] || ! [[ "$gas_price" =~ ^[0-9]+$ ]]; then
                echo "Ошибка: Не удалось получить данные о газе. Майнер не будет запущен."
            elif [ "$gas_price" -le "$POPM_STATIC_FEE" ]; then
                if pgrep -f "popmd" > /dev/null; then
                    echo "Майнер уже работает. Логи в основном окне не будут показаны, так как он запущен вне скрипта."
                    echo "Остановите майнер (pkill -f popmd) и повторите попытку, если хотите видеть логи здесь."
                else
                    echo "Газ в норме ($gas_price <= $POPM_STATIC_FEE), запускаем майнер в основном окне..."
                    source "$CONFIG_FILE" && ./popmd
                fi
            else
                echo "Газ слишком высокий ($gas_price > $POPM_STATIC_FEE), майнер не будет запущен."
                echo "Ждем, пока мониторинг в screen запустит майнер, когда газ снизится."
            fi
            ;;
        2)
            nano "$CONFIG_FILE"
            chmod +x "$CONFIG_FILE"
            echo "Конфиг отредактирован. Перезапустите мониторинг и майнер, если нужно."
            source "$CONFIG_FILE"
            ;;
        3)
            if pgrep -f "popmd" > /dev/null; then
                echo "Останавливаем майнер перед выходом..."
                pkill -f "popmd"
            fi
            if screen -list | grep -q "gas_monitor"; then
                echo "Останавливаем мониторинг газа..."
                screen -S gas_monitor -X quit
            fi
            echo "Выход из программы"
            exit 0
            ;;
        *)
            echo "Неверный ввод! Выберите 1, 2 или 3."
            ;;
    esac
done
